package scaler.modulo;

import java.util.HashMap;
import java.util.Map;

public class HugeNumberModTarget {
    public static void main(String args[]) {
        Solution s = new Solution();
        String A = "12345";
        int B = 7;
//        int tenPowerModMVal = s.tenPowerModM(3,7);
//        System.out.println("10^3%7 : " +tenPowerModMVal);
        int x = s.findMod(A, B);
        System.out.println("A : "+A);
        System.out.println("B : "+B);
        System.out.println("x : "+x);
        A= "337689884152234283479219710283133897863406285776233966461569201071468563174848099682993719210425" +
                "9262424872762596517608044979420542708666743458896479136092012767496688895513519555848198260" +
                "7649149066706318467999604351607076290061014301665460955486826318607395874438638979276843621" +
                "4872450660981555784553523169708750922728603815759943928022498605299682869808821618994601366" +
                "8575524907265667247131387474938368178468079010372182011031233484882674550991596360824830175" +
                "5209648745801051790349317815437076201098697691181197991773205005741504474923658869493093404" +
                "7626066996080349892078595371364746524063504861348228948706151548021684232901040640598145986" +
                "91908694806076090944867505304961812957551421768715654847684393485806754210013360142052734908" +
                "29794313792170617150403387710598035098198270458045270473136980513878470562279665708209818829" +
                "48222515403862859985302310030504402823358361838857184250576849404015772261059362299383316049" +
                "61410884135442454759765743961959505995159372784710175250271424457086959568546614881477959447" +
                "64517567800867269045065555028785760280065552279442138564318816409995228748407102614395019781" +
                "36389545829077545136515937324110266230772359852542323628624378505252244485155201791199775683" +
                "54012442387971422458306704633846518883648184428761852660218787728232672014842281740412819303" +
                "02458772624825823083777494928668536720477844020638880209838018159277840919311737533012788843" +
                "46256317039727273927000697644987601131307704544240546340297375648671409120951075889522249164" +
                "55218488466999379822548539112904113603022447860358972042430931721202577902498952383254390921" +
                "96218117849110481582956740777303208659410322641858361618232336135594660944051582341971152220" +
                "842515457449335468828023659704577478492619713372644300516540853861188732325364264170562688966" +
                "8028964797579999284844711197337724879506208424572912562398316134335486638638057925313634035298" +
                "7156423034084648886922758453255410378796116123926133861624860535127396036247452714541759563126" +
                "6479784368890586162765699390945711597568683708677801725754890167006014567632722580335414135725" +
                "0834202774634436945121365292259271955982570276926311730442608539002679359734013157404332935125" +
                "952766200822525873881546186029562288585663585872637636733244814165912781388557966534732856689032";
//         8  557 966 534 732 856 689 032
        B = 8;
        x = s.findMod(A, B);
        System.out.println("A : "+A);
        System.out.println("B : "+B);
        System.out.println("x : "+x);
        System.out.println("-43%7 : "+(-43%7) );
    }
}
class Solution {

    public int findMod(String A, int B) {
        int n = A.length(); // n is length of string or no of digits in n
        long output=0;
        for(int i=n-1;i>=0;i--){
            int x = Integer.parseInt(A.charAt(i)+"");
            int y= tenPowerModM(n-1-i,B);
            output = output%B+(y*(x % B))%B;
            output %= B;
        }
        return (int)output;
    }

    //for calculating (ten^i)%M
    Map<Integer, Integer> hm = null;
    public int tenPowerModM(int i, int M){

        long output=1;
        int tenPower_i_1=0;
        if(i==0){
            output = 1%M;
            hm = new HashMap<Integer, Integer>();
            hm.put(0,(int)output);
            return (int)output;
        }
        if(!hm.containsKey(i)){
//            if(!hm.containsKey(i-1)) {
//                tenPower_i_1 = tenPowerModM(i - 1, M);
//            }else{
                tenPower_i_1 = hm.get(i-1);
//            }
            output = ((long)(tenPower_i_1)*(10%M))%M;
            if(output>=M){
                output %= M;
            }
            hm.put(i,(int)output);
            System.out.println("key : "+i+"value : "+hm.get(i));
        }
        return (int)output;
    }
}